{"version":3,"sources":["state/weather.ts","consts/colors.ts","utils.tsx","components/Planets.tsx","components/Sky.tsx","components/Water.tsx","App.tsx","reportWebVitals.ts","state/timezone.ts","store.ts","index.tsx"],"names":["weatherSlice","createSlice","name","initialState","main","temp","humidity","sys","sunrise","sunset","reducers","updateWeather","state","action","payload","actions","MOON_WHITE","getCycleHeight","date","x","getTime","Infinity","Math","sin","PI","getSunYPos","getMoonYPos","getCycleOpacity","invert","y","isDaylight","Sun","Wrapper","SunCircle","this","props","active","React","Component","SunReflection","ReflectionWrapper","SunReflectionCircle","opacity","Waves","Moon","MoonCircle","MoonReflection","MoonReflectionCircle","styled","div","Planet","ReflectionCircle","WavesAnimation","keyframes","Sky","weather","useSelector","timezone","TheSky","Date","toLocaleString","timeZone","NightSky","Water","TheWater","NightWater","App","dispatch","useDispatch","useEffect","a","axios","get","response","data","getWeather","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Timezone","setTimezone","store","configureStore","reducer","WeatherSlice","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.509311f7.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\n\r\nexport\r\ninterface WeatherData {\r\n  main: {\r\n    temp: number,\r\n    humidity: number\r\n  },\r\n  sys: {\r\n    sunrise: number,\r\n    sunset: number\r\n  }\r\n}\r\nconst initialState: WeatherData = {\r\n    main: {\r\n        temp: 0,\r\n        humidity: 0\r\n    },\r\n    sys: {\r\n        sunrise: 0,\r\n        sunset: 0\r\n    }\r\n}\r\n\r\nexport const weatherSlice = createSlice({\r\n  name: 'weather',\r\n  initialState,\r\n  reducers: {\r\n    updateWeather: (state, action: PayloadAction<WeatherData>) => {\r\n      state = action.payload\r\n      return state\r\n    },\r\n  },\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { updateWeather } = weatherSlice.actions\r\n\r\nexport default weatherSlice.reducer","export const SKY_BLUE = '#3bbbff'\r\nexport const WATER_BLUE = '#257acb'\r\nexport const MOON_WHITE = '#f1ece1'\r\nexport const SUN_YELLOW = '#fca400'","const CEILING = .45\r\n\r\nexport function getCycleHeight(date: Date, sunrise: number, sunset: number): number {\r\n    const seconds = date.getTime() / 1_000\r\n    // const seconds = sunrise\r\n    const timeSinceSunrise = seconds - sunrise\r\n    const lengthOfDay = sunset - sunrise\r\n    const x = timeSinceSunrise / lengthOfDay\r\n    if (x === Infinity) {\r\n        return 0\r\n    }\r\n    const y =  CEILING * Math.sin(x * Math.PI)\r\n    return y\r\n}\r\n\r\nexport function getSunYPos(date: Date, sunrise: number, sunset: number): string {\r\n    const y = -1 * getCycleHeight(date, sunrise, sunset)\r\n    return y * 100 + \"vh\"\r\n}\r\n\r\nexport function getMoonYPos(date: Date, sunrise: number, sunset: number): string {\r\n    const y = getCycleHeight(date, sunrise, sunset)\r\n    return y * 100 + \"vh\"\r\n}\r\n\r\nexport function getCycleOpacity(date: Date, sunrise: number, sunset: number, invert: boolean): number {\r\n    let y = getCycleHeight(date, sunrise, sunset)\r\n    y = invert ? y * -1 : y\r\n    if (y < 0) {\r\n        return 0;\r\n    }\r\n    return 1 - (y * (.9 / CEILING))\r\n}\r\n\r\nexport function isDaylight(date: Date, sunrise: number, sunset: number): boolean {\r\n    const y = getCycleHeight(date, sunrise, sunset)\r\n    return y > 0\r\n}","import React from 'react';\r\nimport styled, { keyframes } from 'styled-components';\r\nimport { MOON_WHITE, WATER_BLUE, SUN_YELLOW } from '../consts/colors';\r\nimport {getSunYPos, getMoonYPos, getCycleOpacity, isDaylight} from '../utils';\r\n\r\nexport class Sun extends React.Component<{\r\n    temp: number,\r\n    date: Date,\r\n    sunrise: number,\r\n    sunset: number\r\n},{\r\n    height: number,\r\n    color: string\r\n}> {\r\n    render() {\r\n        return (\r\n            <Wrapper>\r\n                <SunCircle y={getSunYPos(this.props.date, this.props.sunrise, this.props.sunset)}\r\n                    active={isDaylight(this.props.date, this.props.sunrise, this.props.sunset)}/>\r\n            </Wrapper> )\r\n    }\r\n}\r\n\r\nexport class SunReflection extends React.Component<{\r\n    temp: number,\r\n    date: Date,\r\n    sunrise: number,\r\n    sunset: number\r\n},{\r\n    height: number,\r\n    color: string\r\n}> {\r\n    render() {\r\n        return (\r\n            <ReflectionWrapper>\r\n                <SunReflectionCircle y={getMoonYPos(this.props.date, this.props.sunrise, this.props.sunset)}\r\n                    opacity={getCycleOpacity(this.props.date, this.props.sunrise, this.props.sunset, false)}>\r\n                        <Waves/>\r\n                </SunReflectionCircle>\r\n            </ReflectionWrapper> )\r\n    }\r\n}\r\n\r\nexport class Moon extends React.Component<{\r\n    temp: number,\r\n    date: Date,\r\n    sunrise: number,\r\n    sunset: number\r\n},{\r\n    height: number,\r\n    color: string\r\n}> {\r\n    render() {\r\n        return (\r\n            <Wrapper>\r\n                <MoonCircle y={getMoonYPos(this.props.date, this.props.sunrise, this.props.sunset)}\r\n                    active={!isDaylight(this.props.date, this.props.sunrise, this.props.sunset)}/>\r\n            </Wrapper>\r\n        )\r\n    }\r\n}\r\n\r\nexport class MoonReflection extends React.Component<{\r\n    temp: number,\r\n    date: Date,\r\n    sunrise: number,\r\n    sunset: number\r\n},{\r\n    height: number,\r\n    color: string\r\n}> {\r\n    render() {\r\n        return (\r\n            <ReflectionWrapper>\r\n                <MoonReflectionCircle y={getSunYPos(this.props.date, this.props.sunrise, this.props.sunset)}\r\n                    opacity={getCycleOpacity(this.props.date, this.props.sunrise, this.props.sunset, true)}>\r\n                        <Waves/>\r\n                </MoonReflectionCircle>\r\n            </ReflectionWrapper>\r\n        )\r\n    }\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n    position: relative;\r\n    left: 0px;\r\n    top: 0px;\r\n    z-index: 50;\r\n`\r\nconst ReflectionWrapper = styled.div`\r\n    position: relative;\r\n    left: 0px;\r\n    top: 0px;\r\n    z-index: 50;\r\n    mix-blend-mode: screen;\r\n`\r\nconst Planet = styled.div<{y: string; active: boolean}>`\r\n    width: 10vh;\r\n    height: 10vh;\r\n    position: fixed;\r\n    left: 50%;\r\n    top: 50%;\r\n    transform: translate(-50%, ${props => props.y});\r\n    display: ${props => props.active ? \"block\" : \"none\"};\r\n    border-radius: 100%;\r\n`\r\n\r\nconst SunCircle = styled(Planet)`\r\n    background-color: #fca400;\r\n    box-shadow: 0px 0px 5px 5px ${SUN_YELLOW};\r\n`;\r\n\r\nconst MoonCircle = styled(Planet)`\r\n    background-color: ${MOON_WHITE};\r\n    box-shadow: 0px 0px 5px 5px ${MOON_WHITE};\r\n`;\r\n\r\nconst ReflectionCircle = styled.div<{y: string; opacity: number}>`\r\n    width: 15vh;\r\n    height: 7vh;\r\n    position: absolute;\r\n    left: 50%;\r\n    top: 50%;\r\n    transform: translate(-50%, ${props => props.y}) translateY(-100%);\r\n    border-radius: 100%;\r\n    opacity: ${props => props.opacity};\r\n`;\r\n\r\nconst SunReflectionCircle = styled(ReflectionCircle)`\r\n    background-color: #fca400;\r\n    box-shadow: 0px 0px 5px 5px #fca400;\r\n`;\r\n\r\nconst MoonReflectionCircle = styled(ReflectionCircle)`\r\n    background-color: ${MOON_WHITE};\r\n    box-shadow: 0px 0px 10px 20px ${MOON_WHITE};\r\n`;\r\n\r\n\r\nconst WavesAnimation = keyframes`\r\n  0%{background-position:0% 0%}\r\n  100%{background-position:0% 100%}\r\n`;\r\n\r\nconst Waves = styled.div`\r\n  background: linear-gradient(180deg, #000000ee, #00000066, #000000ee, #00000066, #000000ee, #00000066, #000000);\r\n  background-size: 100% 40%;\r\n\r\n  width: 200%;\r\n  height: 250%;\r\n  position: relative;\r\n  left: -50%;\r\n  top: -50%;\r\n  z-index: -1;\r\n\r\n  opacity: 1;\r\n\r\n  border-radius: 100%;\r\n\r\n  animation-name: ${WavesAnimation};\r\n  animation-duration: 15s;\r\n  animation-direction: normal;\r\n  animation-iteration-count: infinite;\r\n  animation-timing-function: linear;\r\n`","import { useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport { SKY_BLUE } from \"../consts/colors\";\r\nimport { RootState } from \"../store\";\r\nimport { getCycleOpacity, isDaylight } from \"../utils\";\r\nimport { Moon, Sun } from \"./Planets\";\r\n\r\nexport function Sky () {\r\n    const weather = useSelector((state: RootState) => state.weather)\r\n    const timezone = useSelector((state: RootState) => state.timezone)\r\n    return (\r\n        <div>\r\n            <TheSky>\r\n                <Sun temp={weather.main.temp} date={new Date(new Date().toLocaleString('en-US', { timeZone: timezone }))}\r\n                    sunrise={weather.sys.sunrise} sunset={weather.sys.sunset}/>\r\n                <Moon temp={weather.main.temp} date={new Date(new Date().toLocaleString('en-US', { timeZone: timezone }))}\r\n                    sunrise={weather.sys.sunrise} sunset={weather.sys.sunset}/>\r\n                <NightSky opacity={1 - getCycleOpacity(new Date(new Date().toLocaleString('en-US', { timeZone: timezone })), weather.sys.sunrise, weather.sys.sunset, true)}\r\n                    active={!isDaylight(new Date(new Date().toLocaleString('en-US', { timeZone: timezone })), weather.sys.sunrise, weather.sys.sunset)}\r\n                />\r\n            </TheSky>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst TheSky = styled.div`\r\n    background-color: ${SKY_BLUE};\r\n    width: 100vw;\r\n    height: 50vh;\r\n    position: fixed;\r\n    left: 0%;\r\n    top: 0%;\r\n    z-index: -3;\r\n`;\r\n\r\nconst NightSky = styled(TheSky)<{opacity: number; active: boolean}>`\r\n    background-color: #020608;\r\n    z-index: 0;\r\n    opacity: ${props => props.opacity};\r\n    display: ${props => props.active ? \"block\" : \"none\"};\r\n`;","import { useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport { WATER_BLUE } from \"../consts/colors\";\r\nimport { RootState } from \"../store\";\r\nimport { getCycleOpacity, isDaylight } from \"../utils\";\r\nimport { MoonReflection, SunReflection } from \"./Planets\";\r\n\r\nexport function Water () {\r\n    const weather = useSelector((state: RootState) => state.weather)\r\n    const timezone = useSelector((state: RootState) => state.timezone)\r\n    return (\r\n        <div>\r\n            <TheWater>\r\n                <SunReflection temp={weather.main.temp} date={new Date(new Date().toLocaleString('en-US', { timeZone: timezone }))}\r\n                    sunrise={weather.sys.sunrise} sunset={weather.sys.sunset}/>\r\n                <MoonReflection temp={weather.main.temp} date={new Date(new Date().toLocaleString('en-US', { timeZone: timezone }))}\r\n                    sunrise={weather.sys.sunrise} sunset={weather.sys.sunset}/>\r\n                <NightWater opacity={1 - getCycleOpacity(new Date(new Date().toLocaleString('en-US', { timeZone: timezone })), weather.sys.sunrise, weather.sys.sunset, true)}\r\n                    active={!isDaylight(new Date(new Date().toLocaleString('en-US', { timeZone: timezone })), weather.sys.sunrise, weather.sys.sunset)}\r\n                />\r\n            </TheWater>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst TheWater = styled.div`\r\n    background-color: ${WATER_BLUE};\r\n    width: 100vw;\r\n    height: 50vh;\r\n    position: fixed;\r\n    left: 0%;\r\n    top: 50%;\r\n    overflow: hidden;\r\n`;\r\n\r\nconst NightWater = styled(TheWater)<{opacity: number; active: boolean}>`\r\n    background-color: #020608;\r\n    opacity: ${props => props.opacity};\r\n    display: ${props => props.active ? \"block\" : \"none\"};\r\n`;","import axios from 'axios';\nimport { useEffect } from 'react';\nimport { updateWeather, WeatherData } from './state/weather';\nimport { Sky } from './components/Sky';\nimport { useDispatch } from 'react-redux';\nimport { Water } from './components/Water';\n\nfunction App () {\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    async function getWeather() {\n      const response = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=Alpharetta&appid=be2c8b47db11b9e2a67c020b9065d4eb&units=imperial`)\n\n      const data = response.data as WeatherData\n      dispatch(updateWeather(data))\n    }\n\n    getWeather()\n  });\n\n  return (\n    <div className=\"App\">\n      <Water/>\n      <Sky/>\n    </div>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\n\r\nconst initialState: string = \"America/New_York\"\r\n\r\nexport const Timezone = createSlice({\r\n  name: 'weather',\r\n  initialState,\r\n  reducers: {\r\n    setTimezone: (state, action: PayloadAction<string>) => {\r\n      state = action.payload\r\n      return state\r\n    },\r\n  },\r\n})\r\n\r\nexport const { setTimezone } = Timezone.actions\r\n\r\nexport default Timezone.reducer","import { configureStore } from '@reduxjs/toolkit'\r\nimport Timezone from './state/timezone'\r\nimport WeatherSlice from './state/weather'\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n      weather: WeatherSlice,\r\n      timezone: Timezone\r\n  },\r\n})\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { Provider } from 'react-redux'\nimport { store } from './store'\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}