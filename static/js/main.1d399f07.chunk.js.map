{"version":3,"sources":["state/weather.ts","utils.tsx","components/Planets.tsx","components/Sky.tsx","components/Water.tsx","state/time.ts","components/TimeSelector.tsx","App.tsx","reportWebVitals.ts","store.ts","index.tsx"],"names":["weatherSlice","createSlice","name","initialState","main","temp","humidity","sys","sunrise","sunset","reducers","updateWeather","state","action","payload","actions","getCycleHeight","date","x","getTime","Infinity","Math","sin","PI","getSunYPos","getMoonYPos","getCycleOpacity","invert","y","isDaylight","Sun","SunCircle","this","props","active","React","Component","SunReflection","ReflectionWrapper","SunReflectionCircle","opacity","Waves","Moon","MoonCircle","MoonReflection","MoonReflectionCircle","styled","div","Planet","ReflectionCircle","WavesAnimation","keyframes","Sky","weather","useSelector","timestate","time","TheSky","NightSky","Water","TheWater","NightWater","defaultTimezone","timezone","Date","toLocaleString","timeZone","TimeState","setTimezone","timezoneList","title","id","TimezoneSelector","currentTimezone","dispatch","useDispatch","handleClick","tz","Timezones","map","TimezoneOption","selected","onClick","App","useEffect","a","axios","get","response","data","getWeather","className","TimezoneWrapper","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","WeatherSlice","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.1d399f07.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\n\r\nexport\r\ninterface WeatherData {\r\n  main: {\r\n    temp: number,\r\n    humidity: number\r\n  },\r\n  sys: {\r\n    sunrise: number,\r\n    sunset: number\r\n  }\r\n}\r\nconst initialState: WeatherData = {\r\n    main: {\r\n        temp: 0,\r\n        humidity: 0\r\n    },\r\n    sys: {\r\n        sunrise: 0,\r\n        sunset: 0\r\n    }\r\n}\r\n\r\nexport const weatherSlice = createSlice({\r\n  name: 'weather',\r\n  initialState,\r\n  reducers: {\r\n    updateWeather: (state, action: PayloadAction<WeatherData>) => {\r\n      state = action.payload\r\n      return state\r\n    },\r\n  },\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { updateWeather } = weatherSlice.actions\r\n\r\nexport default weatherSlice.reducer","const CEILING = .45\r\n\r\nexport function getCycleHeight(date: Date, sunrise: number, sunset: number): number {\r\n    const seconds = date.getTime() / 1_000\r\n    // const seconds = sunrise\r\n    const timeSinceSunrise = seconds - sunrise\r\n    const lengthOfDay = sunset - sunrise\r\n    const x = timeSinceSunrise / lengthOfDay\r\n    if (x === Infinity) {\r\n        return 0\r\n    }\r\n    const y =  CEILING * Math.sin(x * Math.PI)\r\n    return y\r\n}\r\n\r\nexport function getSunYPos(date: Date, sunrise: number, sunset: number): string {\r\n    const y = -1 * getCycleHeight(date, sunrise, sunset)\r\n    return y * 100 + \"vh\"\r\n}\r\n\r\nexport function getMoonYPos(date: Date, sunrise: number, sunset: number): string {\r\n    const y = getCycleHeight(date, sunrise, sunset)\r\n    return y * 100 + \"vh\"\r\n}\r\n\r\nexport function getCycleOpacity(date: Date, sunrise: number, sunset: number, invert: boolean): number {\r\n    let y = getCycleHeight(date, sunrise, sunset)\r\n    y = invert ? y * -1 : y\r\n    if (y < 0) {\r\n        return 0;\r\n    }\r\n    return 1 - (y * (.7 / CEILING))\r\n}\r\n\r\nexport function isDaylight(date: Date, sunrise: number, sunset: number): boolean {\r\n    const y = getCycleHeight(date, sunrise, sunset)\r\n    return y > 0\r\n}","import React from 'react';\r\nimport styled, { keyframes } from 'styled-components';\r\nimport {getSunYPos, getMoonYPos, getCycleOpacity, isDaylight} from '../utils';\r\n\r\nexport class Sun extends React.Component<{\r\n    temp: number,\r\n    date: Date,\r\n    sunrise: number,\r\n    sunset: number\r\n},{\r\n    height: number,\r\n    color: string\r\n}> {\r\n    render() {\r\n        return (\r\n            <SunCircle y={getSunYPos(this.props.date, this.props.sunrise, this.props.sunset)}\r\n                active={isDaylight(this.props.date, this.props.sunrise, this.props.sunset)}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport class SunReflection extends React.Component<{\r\n    temp: number,\r\n    date: Date,\r\n    sunrise: number,\r\n    sunset: number\r\n},{\r\n    height: number,\r\n    color: string\r\n}> {\r\n    render() {\r\n        return (\r\n            <ReflectionWrapper>\r\n                <SunReflectionCircle y={getMoonYPos(this.props.date, this.props.sunrise, this.props.sunset)}\r\n                    opacity={getCycleOpacity(this.props.date, this.props.sunrise, this.props.sunset, false)}>\r\n                        <Waves/>\r\n                </SunReflectionCircle>\r\n            </ReflectionWrapper> )\r\n    }\r\n}\r\n\r\nexport class Moon extends React.Component<{\r\n    temp: number,\r\n    date: Date,\r\n    sunrise: number,\r\n    sunset: number\r\n},{\r\n    height: number,\r\n    color: string\r\n}> {\r\n    render() {\r\n        return (\r\n            <MoonCircle y={getMoonYPos(this.props.date, this.props.sunrise, this.props.sunset)}\r\n                active={!isDaylight(this.props.date, this.props.sunrise, this.props.sunset)}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport class MoonReflection extends React.Component<{\r\n    temp: number,\r\n    date: Date,\r\n    sunrise: number,\r\n    sunset: number\r\n},{\r\n    height: number,\r\n    color: string\r\n}> {\r\n    render() {\r\n        return (\r\n            <ReflectionWrapper>\r\n                <MoonReflectionCircle y={getSunYPos(this.props.date, this.props.sunrise, this.props.sunset)}\r\n                    opacity={getCycleOpacity(this.props.date, this.props.sunrise, this.props.sunset, true)}>\r\n                        <Waves/>\r\n                </MoonReflectionCircle>\r\n            </ReflectionWrapper>\r\n        )\r\n    }\r\n}\r\n\r\nconst ReflectionWrapper = styled.div`\r\n    position: relative;\r\n    left: 0px;\r\n    top: 0px;\r\n    z-index: 50;\r\n    mix-blend-mode: screen;\r\n`\r\nconst Planet = styled.div<{y: string; active: boolean}>`\r\n    width: 10vh;\r\n    height: 10vh;\r\n    position: absolute;\r\n    left: 50%;\r\n    top: 100%;\r\n    transform: translate(-50%, ${props => props.y});\r\n    display: ${props => props.active ? \"block\" : \"none\"};\r\n    border-radius: 100%;\r\n`\r\n\r\nconst SunCircle = styled(Planet)`\r\n    box-shadow: 0px 0px 5px 1px black;\r\n`;\r\n\r\nconst MoonCircle = styled(Planet)`\r\n    background-color: #ffffff;\r\n    box-shadow: 0px 0px 5px 1px #ffffff;\r\n`;\r\n\r\nconst ReflectionCircle = styled.div<{y: string; opacity: number}>`\r\n    width: 10vh;\r\n    height: 10vh;\r\n    position: absolute;\r\n    left: 50%;\r\n    top: 50%;\r\n    transform: translate(-50%, ${props => props.y}) translateY(-100%);\r\n    border-radius: 100%;\r\n    opacity: ${props => props.opacity};\r\n`;\r\n\r\nconst SunReflectionCircle = styled(ReflectionCircle)`\r\n    background-color: white;\r\n    box-shadow: 0px 0px 5px 5px white;\r\n`;\r\n\r\nconst MoonReflectionCircle = styled(ReflectionCircle)`\r\n    background-color: #ffffff;\r\n    box-shadow: 0px 0px 5px 1px #ffffff;\r\n`;\r\n\r\n\r\nconst WavesAnimation = keyframes`\r\n  0%{background-position:0% 0%}\r\n  100%{background-position:0% 100%}\r\n`;\r\n\r\nconst Waves = styled.div`\r\n  background: linear-gradient(180deg, #00000088, #00000066, #00000088, #00000066, #00000088, #00000066, #00000088, #00000066, #00000088);\r\n  background-size: 100% 40%;\r\n\r\n  width: 200%;\r\n  height: 250%;\r\n  position: relative;\r\n  left: -50%;\r\n  top: -50%;\r\n  z-index: -1;\r\n\r\n  opacity: 1;\r\n\r\n  border-radius: 100%;\r\n\r\n  animation-name: ${WavesAnimation};\r\n  animation-duration: 20s;\r\n  animation-direction: normal;\r\n  animation-iteration-count: infinite;\r\n  animation-timing-function: linear;\r\n`","import { useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport { RootState } from \"../store\";\r\nimport { isDaylight } from \"../utils\";\r\nimport { Moon, Sun } from \"./Planets\";\r\n\r\nexport function Sky () {\r\n    const weather = useSelector((state: RootState) => state.weather)\r\n    const timestate = useSelector((state: RootState) => state.time)\r\n    return (\r\n        <div>\r\n            <TheSky>\r\n                <Sun temp={weather.main.temp} date={timestate.time}\r\n                    sunrise={weather.sys.sunrise} sunset={weather.sys.sunset}/>\r\n                <Moon temp={weather.main.temp} date={timestate.time}\r\n                    sunrise={weather.sys.sunrise} sunset={weather.sys.sunset}/>\r\n                <NightSky active={!isDaylight(timestate.time, weather.sys.sunrise, weather.sys.sunset)}\r\n                />\r\n            </TheSky>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst TheSky = styled.div`\r\n    width: 100vw;\r\n    height: 50vh;\r\n    position: relative;\r\n    overflow: hidden;\r\n`;\r\n\r\nconst NightSky = styled(TheSky)<{active: boolean}>`\r\n    background-color: #020608;\r\n    z-index: -2;\r\n    display: ${props => props.active ? \"block\" : \"none\"};\r\n`;","import { useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport { RootState } from \"../store\";\r\nimport { getCycleOpacity, isDaylight } from \"../utils\";\r\nimport { MoonReflection, SunReflection } from \"./Planets\";\r\n\r\nexport function Water () {\r\n    const weather = useSelector((state: RootState) => state.weather)\r\n    const timestate = useSelector((state: RootState) => state.time)\r\n    return (\r\n        <div>\r\n            <TheWater>\r\n                <SunReflection temp={weather.main.temp} date={timestate.time}\r\n                    sunrise={weather.sys.sunrise} sunset={weather.sys.sunset}/>\r\n                <MoonReflection temp={weather.main.temp} date={timestate.time}\r\n                    sunrise={weather.sys.sunrise} sunset={weather.sys.sunset}/>\r\n                <NightWater opacity={1 - getCycleOpacity(timestate.time, weather.sys.sunrise, weather.sys.sunset, true)}\r\n                    active={!isDaylight(timestate.time, weather.sys.sunrise, weather.sys.sunset)}\r\n                />\r\n            </TheWater>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst TheWater = styled.div`\r\n    background-color: black;\r\n    border-top: .5px solid white;\r\n    width: 100vw;\r\n    height: 50vh;\r\n    position: relative;\r\n    overflow: hidden;\r\n    box-sizing: border-box;\r\n`;\r\n\r\nconst NightWater = styled(TheWater)<{opacity: number; active: boolean}>`\r\n    background-color: #020608;\r\n    opacity: ${props => props.opacity};\r\n    display: ${props => props.active ? \"block\" : \"none\"};\r\n`;","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\n\r\nexport interface TimeData {\r\n  timezone: string,\r\n  time: Date\r\n}\r\n\r\nconst defaultTimezone = \"America/New_York\"\r\n\r\nconst initialState: TimeData = {\r\n  timezone: defaultTimezone,\r\n  time: new Date(new Date().toLocaleString('en-US', { timeZone: defaultTimezone }))\r\n}\r\n\r\nexport const TimeState = createSlice({\r\n  name: 'weather',\r\n  initialState,\r\n  reducers: {\r\n    setTimezone: (state, action: PayloadAction<string>) => {\r\n      state.timezone = action.payload\r\n      state.time = new Date(new Date().toLocaleString('en-US', { timeZone: action.payload }))\r\n      return state\r\n    },\r\n  },\r\n})\r\n\r\nexport const { setTimezone } = TimeState.actions\r\n\r\nexport default TimeState.reducer","import { useDispatch, useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { setTimezone } from '../state/time';\r\nimport { RootState } from '../store';\r\n\r\ninterface Timezone {\r\n    title: string,\r\n    id: string\r\n}\r\n\r\nconst timezoneList = [\r\n    {\r\n        title: \"New York\",\r\n        id: \"America/New_York\"\r\n    },\r\n    {\r\n        title: \"Los Angeles\",\r\n        id: \"America/Los_Angeles\"\r\n    },\r\n    {\r\n        title: \"China\",\r\n        id: \"Asia/Shanghai\"\r\n    }\r\n] as Timezone[]\r\n\r\nexport function TimezoneSelector() {\r\n    const currentTimezone = useSelector((state: RootState) => state.time.timezone)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClick = (tz: string) => {\r\n        return () => {dispatch(setTimezone(tz))}\r\n    }\r\n    return (\r\n    <Timezones>\r\n        {\r\n            timezoneList.map((tz) => {\r\n                return <TimezoneOption selected={currentTimezone === tz.id}\r\n                            onClick={handleClick(tz.id)}\r\n                        > {tz.title} </TimezoneOption>\r\n            })\r\n        }\r\n    </Timezones>\r\n    )\r\n}\r\n\r\n\r\nconst Timezones = styled.div`\r\n\r\n`\r\nconst TimezoneOption = styled.div<{selected: boolean}>`\r\n    color: white;\r\n    cursor: pointer;\r\n    padding: .25rem .5rem;\r\n    margin: .25rem .5rem;\r\n    ${props => {\r\n        if (props.selected) {\r\n            return`\r\n                color: black;\r\n                background-color: white;\r\n            `\r\n        }\r\n    }}\r\n`","import axios from 'axios';\nimport { useEffect } from 'react';\nimport { updateWeather, WeatherData } from './state/weather';\nimport { Sky } from './components/Sky';\nimport { useDispatch } from 'react-redux';\nimport { Water } from './components/Water';\nimport styled from 'styled-components';\nimport { TimezoneSelector } from './components/TimeSelector';\n\nfunction App () {\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    async function getWeather() {\n      const response = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=Alpharetta&appid=be2c8b47db11b9e2a67c020b9065d4eb&units=imperial`)\n\n      const data = response.data as WeatherData\n      dispatch(updateWeather(data))\n    }\n\n    getWeather()\n  });\n\n  return (\n    <div className=\"App\">\n      <Sky/>\n      <Water/>\n      <TimezoneWrapper>\n        <TimezoneSelector></TimezoneSelector>\n      </TimezoneWrapper>\n    </div>\n  )\n}\n\nexport default App;\n\nconst TimezoneWrapper = styled.div`\n  position: fixed;\n  bottom: 0px;\n`","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport TimeState from './state/time'\r\nimport WeatherSlice from './state/weather'\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n      weather: WeatherSlice,\r\n      time: TimeState\r\n  },\r\n})\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { Provider } from 'react-redux'\nimport { store } from './store'\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}